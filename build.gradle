plugins {
    id 'java'
    id 'application'
    id 'checkstyle'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'org.openjfx.javafxplugin' version '0.0.13'
}

checkstyle {
    toolVersion = '10.2'
    configFile = file("${rootProject.projectDir}/config/checkstyle/checkstyle.xml")
    configProperties.suppressionsFile = file("${rootProject.projectDir}/config/checkstyle/suppressions.xml")
}

repositories {
    mavenCentral()
}

dependencies {
    String javaFxVersion = '17.0.7'
    String platform = getJavaFXPlatform()

    implementation "org.openjfx:javafx-base:${javaFxVersion}:${platform}"
    implementation "org.openjfx:javafx-controls:${javaFxVersion}:${platform}"
    implementation "org.openjfx:javafx-fxml:${javaFxVersion}:${platform}"
    implementation "org.openjfx:javafx-graphics:${javaFxVersion}:${platform}"

    testImplementation "org.junit.jupiter:junit-jupiter-api:5.10.0"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.10.0"
}

def getJavaFXPlatform() {
    def osName = System.getProperty("os.name").toLowerCase()
    def arch = System.getProperty("os.arch").toLowerCase()

    if (osName.contains("win")) {
        return "win"
    } else if (osName.contains("mac")) {
        return arch.contains("aarch64") ? "mac-aarch64" : "mac"
    } else if (osName.contains("linux")) {
        return "linux"
    } else {
        throw new GradleException("Unsupported OS: " + osName)
    }
}

test {
    useJUnitPlatform()

    testLogging {
        events "passed", "skipped", "failed"

        showExceptions true
        exceptionFormat "full"
        showCauses true
        showStackTraces true
        showStandardStreams = false
    }
}

application {
    mainClass.set("gui.Launcher")
}

shadowJar {
    archiveBaseName = "dar"
    archiveClassifier = null
    mergeServiceFiles()
}

run{
    standardInput = System.in
}

tasks.processResources.doLast {
    copy {
        from 'src/main/resources/view/MainWindow.fxml'
        into "${buildDir}/resources/main/view"
    }
}